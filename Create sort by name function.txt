My third task has the following requirements:
Create a function that accepts a string as an attribute and can sort data by ` name/common `.

The sort should accept string ` ascend or descend ` and sort countries name by provided attribute (e.g. providing attribute ascend all countries should be sorted from A to Z)
ChatGPT
Sure! We will have to add another parameter to the hook to accept the sort order. Then, we will add a sort function after the filter function inside the hook. Here is how you can do it:

jsx
Copy code
import { useState, useEffect, useRef, useDeferredValue } from 'react';
import { fetchCountries } from './api'; // Update this path to point to your api.js file

const LIMIT = 15;

const useCountryPagination = (searchString, populationLimit, sortOrder) => {
    const [countries, setCountries] = useState([]);
    const [start, setStart] = useState(0);
    const deferredQuery = useDeferredValue(searchString, { timeoutMs: 200 });
    const deferredSortOrder = useDeferredValue(sortOrder, { timeoutMs: 200 });
    const abortController = useRef(new AbortController());

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetchCountries();
                if (!abortController.current.signal.aborted) {
                    setCountries(response.data);
                }
            } catch (error) {
                if (!abortController.current.signal.aborted) {
                    console.error('Failed to fetch countries:', error);
                }
            }
        };
        fetchData();
        return () => {
            abortController.current.abort();
        };
    }, []);

    const handleNext = () => {
        setStart(oldStart => Math.min(oldStart + LIMIT, countries.length - 1));
    };

    const handlePrev = () => {
        setStart(oldStart => Math.max(oldStart - LIMIT, 0));
    };

    const lowerCaseSearchString = deferredQuery.toLowerCase();
    const filteredCountries = countries
        .filter(country => {
            const isNameMatched = country.name.common.toLowerCase().includes(lowerCaseSearchString);
            const isPopulationMatched = Number.isFinite(populationLimit)
                ? country.population / 1_000_000 < populationLimit
                : true;
            return isNameMatched && isPopulationMatched;
        })
        .sort((a, b) => {
            if (deferredSortOrder === 'ascend') {
                return a.name.common.localeCompare(b.name.common);
            } else if (deferredSortOrder === 'descend') {
                return b.name.common.localeCompare(a.name.common);
            } else {
                return 0;  // default to original order if sortOrder is neither 'ascend' nor 'descend'
            }
        });

    const displayedCountries = filteredCountries.slice(start, start + LIMIT);

    return { displayedCountries, handleNext, handlePrev };
};
Here, we added another parameter sortOrder to the useCountryPagination hook, which should be either 'ascend' or 'descend'. We also added deferredSortOrder using useDeferredValue to handle frequent changes of sortOrder. We use the JavaScript's built-in localeCompare function to compare country names in a way that supports international characters and is case-insensitive.

Remember to update your Countries component to provide the sortOrder value:

jsx
Copy code
import React, { useState } from 'react';
import useCountryPagination from './useCountryPagination'; // Update this path to point to your useCountryPagination hook

const Countries = () => {
    const [searchString, setSearchString] = useState('');
    const [populationLimit, setPopulationLimit] = useState(Infinity);
    const [sortOrder, setSortOrder] = useState('ascend');  // Add this line
    const { displayedCountries, handleNext, handlePrev } = useCountryPagination(searchString, populationLimit, sortOrder);

    return (
        <div>
            <input type="text" value={searchString} onChange={e => setSearchString(e.target.value)} placeholder="Search by name" />
            <input type="number" value={populationLimit} onChange={e => setPopulationLimit(e.target.value)} placeholder="Population limit (in millions)" />
            <select value={sortOrder} onChange={e => setSortOrder(e.target.value)}>  {/* Add this block */}
                <option value="ascend">Ascend</option>
                <option value="descend">Descend</option>
            </select>
            {displayedCountries.map((country, index) => (
                <p key={index}>{country.name.common} - Population: {country.population}</p>
            ))}
            <button onClick={handlePrev}>Prev</button>
            <button onClick={handleNext}>Next</button>
        </div>
    );
};

export default Countries;
In this updated Countries component, we added a new useState call to store the sort order, and a new select field that updates the sort order whenever its value changes. The onChange attribute of the select field is set to a function that calls setSortOrder with the select field's new value. Now, when you select a sort order, the list of countries updates in real time to be sorted according to the selected order.